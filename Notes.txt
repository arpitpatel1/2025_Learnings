Concepts : Q & A , RAG, Tools, Agents

Core Components : Model, Prompts, Chain, Memory, Indexes, Agents
                indexes : Doc loader, Text splitter , Vector store, Retriver

Langchain Feature : Structured Output, Runnables

----------------

Structured Output : LLM may or may not capable
  - capable : with_structured_output (typeddict, pydantic, json_schema)
                  - typeddict (define, no validation, kind of hint, annotated to give description)
                  - pydantic (basemodel, validation , field for description and other control)
                  - json_schema (across language, data validation and structure schema)

  - not capable : output parser: workes with both kind of model (strout, jsonout, structuredout, pydanticout)
                  - parser

Chain : Sequeantial, Parallel, Conditional

Runnables :   
    - in early days, chain development(for specific tasks and usecases)
     - runnable (standardize the components to make chain development easy)
     - standardized components (task specific and primitive runnables)
     - Task Specific : Core components converted to runnables
     - Primitive runnables : Execution logic to connect other runnable(sequance/LCEL, parallel, passthrough, lambda, branch)


RAG : Document loader, Text splitter, Vector store, Retriver

Doc Loader: text loader, pypdf(manyother types), webbased, csv, directory loader, lazy load(large file)

Text splitter : length based, text structure , document structure(languages), semantic meaning

Tools : Tool -> Agents
  - Tools (built in & custom) --> Simple python function with langchain wrapper
  - Custom Tool : Three way to make (@tool, StructuredTool(Pydantic), BaseTool(abstract class of tool))
  - Tool Binding (Not every LLM is capable), Tool Calling, Tool Execution

Agent
 - Langchain AgentExecutor (old approach)
 - Langgraph (Latest Approach)